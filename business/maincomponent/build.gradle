//根据isLibrary变量动态的切换 集成/组件模式
if (isLibrary){
    apply plugin: 'com.android.library'
}else{
    apply plugin: 'com.android.application'
}

android {
    compileSdkVersion rootProject.android.compileSdkVersion
    buildToolsVersion rootProject.android.buildToolsVersion

    resourcePrefix "maincomponent_"

    defaultConfig {
        if (!isLibrary){
            applicationId rootProject.appId["maincomponent"]
        }
        minSdkVersion rootProject.android.minSdkVersion
        targetSdkVersion rootProject.android.targetSdkVersion
        versionCode rootProject.android.versionCode
        versionName rootProject.android.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "default"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        car {
            // 这里可以添加car的打包配置
        }

        phone {
            // 这里可以添加phone的打包配置
        }

        pad {
            // 这里可以添加pad的打包配置
        }
    }

    //资源配置
    sourceSets{
        main{
            if(isLibrary){
                // 在集成模式下，使用的manifest文件
                manifest.srcFile 'src/main/library/AndroidManifest.xml'
            }else{
                //在组件模式下，使用的manifest文件
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //在组件模式下，使用的多个java路径
                java.srcDirs 'src/main/library/java','src/main/java'
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation rootProject.dependencie["appcompat"]
    implementation rootProject.dependencie["constraintlayout"]
    testImplementation rootProject.dependencie["junit"]
    androidTestImplementation rootProject.dependencie["testjunit"]
    androidTestImplementation rootProject.dependencie["espresso-core"]

    // 依赖公共组件
    implementation project(path: ':function:common')
}
