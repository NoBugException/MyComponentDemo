apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.example.mycomponentdemo"
        minSdkVersion 17
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // 必须要保证所有的flavor都属于同一个维度
        flavorDimensions "default"
    }

    buildTypes {
        debug {
            // 关闭zipalign优化
            zipAlignEnabled = false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 开启zipalign优化
            zipAlignEnabled = true
        }
    }

    productFlavors {
        car {
            // 这里可以添加car的打包配置
            manifestPlaceholders.put("KEY", "VALUE")
            buildConfigField 'String', 'URL', '"https://www.baidu.com"'
        }

        phone {
            // 这里可以添加phone的打包配置
        }

        pad {
            // 这里可以添加pad的打包配置
        }
    }

    // app签名
    signingConfigs {
        def appStoreFile = System.getenv("STORE_FILE")
        def appStorePassword = System.getenv("STORE_PASSWORD")
        def appKeyAlias = System.getenv("KEY_ALIAS")
        def appKeyPassword = System.getenv("KEY_PASSWORD")

        //当不能从环境变量里获取签名信息的时候，就使用项目中自带的debug签名
        if(!appStoreFile||!appStorePassword||!appKeyAlias||!appKeyPassword){
            appStoreFile = "debug.keystore"
            appStorePassword = "android"
            appKeyAlias = "androiddebugkey"
            appKeyPassword = "android"
        }
        release {
            storeFile file(appStoreFile)
            storePassword appStorePassword
            keyAlias appKeyAlias
            keyPassword appKeyPassword
        }
    }

    dexOptions {
        incremental true // 是否启动dx的增量模式，默认为false。增量模式速度更快，但目前有很多限制，慎用
        javaMaxHeapSize '4g' // 执行dx命令时，分配的最大堆内存，主要是为了解决执行dx内存不够的问题
        jumboMode true // 是否开启jumbo模式，如果函数超过65535个，那么就需要强制开启jumbo模式才可以构建成功
        preDexLibraries true // 是否预执行dex Libraries库工程，开启后会大大提高增量构建的速度，但是会影响clean构建的速度，默认开启。如果使用dx的--multi-dex选项生成多个dex，需要设置为false
        threadCount 2 // 执行dx使用的线程数量
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        // 指定apk的输出路径
        //variant.getPackageApplication().outputDirectory = new File("./apk")
        // 指定apk输出的名称
        outputFileName = "${variant.name}_v${variant.versionName}.apk"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation rootProject.dependencie["appcompat"]
    implementation rootProject.dependencie["constraintlayout"]
    testImplementation rootProject.dependencie["junit"]
    androidTestImplementation rootProject.dependencie["testjunit"]
    androidTestImplementation rootProject.dependencie["espresso-core"]
    implementation project(path: ':function:common')
    if (isLibrary) {
        implementation project(path: ':business:maincomponent')
        implementation project(path: ':business:acomponent')
        implementation project(path: ':business:ccomponent')
        implementation project(path: ':business:dcomponent')
        implementation project(path: ':business:bcomponent')
    }
}